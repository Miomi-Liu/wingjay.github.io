{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0},{"_id":"source/img/说一说我和博客.jpg","path":"img/说一说我和博客.jpg","modified":0},{"_id":"source/img/我的博客.png","path":"img/我的博客.png","modified":0},{"_id":"source/img/域名解析.png","path":"img/域名解析.png","modified":0},{"_id":"source/img/hey_folks.jpg","path":"img/hey_folks.jpg","modified":0},{"_id":"source/img/hexo目录.png","path":"img/hexo目录.png","modified":0},{"_id":"source/img/Disqus评论系统.png","path":"img/Disqus评论系统.png","modified":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0}],"Cache":[{"_id":"source/_drafts/我与代码的相知相遇.md","shasum":"3097a82a15e6d4120df02b508359849cf68b2d32","modified":1449410494000},{"_id":"source/_posts/Hey folks.md","shasum":"6f66763ffdde3337e7b053a1c7935e319601fefe","modified":1449580777000},{"_id":"source/_posts/如何在一天之内搭建以你自己名字为域名的很cool的个人博客.md","shasum":"dbd15dad948c5d98340497f606e907c56ab6ef4b","modified":1450702587000},{"_id":"source/_posts/说一说博客.md","shasum":"cc72f8f8cc200df66593936d5d56a88c58a4cdba","modified":1449581199000},{"_id":"source/favicon.ico","shasum":"bb38565775f52af7d2f1f0187ed9972a7b4f09a1","modified":1449484979000},{"_id":"source/guestbook/index.md","shasum":"a367851e76c80c3e94afb026f9f22ba373b054c6","modified":1449319425000},{"_id":"source/img/域名解析.png","shasum":"e3cd6594465e22ed3b2a872e1b63212862097011","modified":1449477310000},{"_id":"source/robots.txt","shasum":"6123a9417ecb039cb56a5b45c3e0450e30196e35","modified":1449463089000},{"_id":"source/tags/index.md","shasum":"c60250d4ddd679b6841a052c754d7756a2f0be52","modified":1449319425000},{"_id":"source/img/Disqus评论系统.png","shasum":"e313d38101a7a49f717ff8964c9d125eef3b284d","modified":1449481626000},{"_id":"source/img/hexo目录.png","shasum":"826cebfed96a6407234bf963baf6921c398195e1","modified":1449488520000},{"_id":"source/img/hey_folks.jpg","shasum":"b0a05bc1ed1669615ead2c5c9b7947f2b0d3968c","modified":1449580722000},{"_id":"source/img/说一说我和博客.jpg","shasum":"0dee97f7d6615ad884b262e82982db52b2a29358","modified":1449579772000},{"_id":"source/img/我的博客.png","shasum":"9239c9f1baa1d5073c98d07186fc791b2b466203","modified":1449481611000},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1449581286185,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1449581286189,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1449581286191,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1449581286192,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1449581286196,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","modified":1449581286197,"shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1"},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","modified":1449581286199,"shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3"},{"_id":"public/vendors/jquery_lazyload/bower.json","modified":1449581286201,"shasum":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53"},{"_id":"public/vendors/jquery_lazyload/README.html","modified":1449581286217,"shasum":"c593e16f0d63d24b5d3933f3b9297884867ce4a0"},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","modified":1449581286223,"shasum":"bf8e477ee2d81833cff12572a8a5f61abffc187c"},{"_id":"public/vendors/jquery/index.js","modified":1449581286225,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1449581286230,"shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1449581286235,"shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1449581286237,"shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1449581286243,"shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1449581286247,"shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6"},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","modified":1449581286249,"shasum":"0112e96f327d413938d37c1693806f468ffdbace"},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","modified":1449581286251,"shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22"},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","modified":1449581286254,"shasum":"0189d278706509412bac4745f96c83984e1d59f4"},{"_id":"public/vendors/font-awesome/css/font-awesome.css","modified":1449581286257,"shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7"},{"_id":"public/vendors/font-awesome/bower.json","modified":1449581286259,"shasum":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad"},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","modified":1449581286261,"shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1449581286262,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1449581286265,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1449581286267,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1449581286274,"shasum":"5bef8b8758435bc08129f6d374740527a6a9b942"},{"_id":"public/vendors/fastclick/LICENSE","modified":1449581286280,"shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1449581286282,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1449581286285,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1449581286287,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1449581286288,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1449581286290,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1449581286293,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1449581286295,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1449581286300,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1449581286304,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1449581286307,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1449581286310,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1449581286311,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1449581286315,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1449581286318,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1449581286320,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/ua-parser.min.js","modified":1449581286321,"shasum":"1148fa2bcb8b2e40c31e5f597bf794a57369a2e6"},{"_id":"public/js/motion.js","modified":1449581286328,"shasum":"b4132517fe499538ad725094593fb7ead8c04bf7"},{"_id":"public/js/hook-duoshuo.js","modified":1449581286331,"shasum":"eedaf52377991728f1e3e94f2bc4bf23ec41ecea"},{"_id":"public/js/helpers.js","modified":1449581286333,"shasum":"c15216ef897334362789ba37464298948b2eef95"},{"_id":"public/js/fancy-box.js","modified":1449581286337,"shasum":"b5fa638ed371b5f658b0826ec4afee25d9986ef2"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1449581286340,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/js/bootstrap.js","modified":1449581286343,"shasum":"f9b637b6d064f728d7dc2b6b5058a006a4454299"},{"_id":"public/images/searchicon.png","modified":1449581286345,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/quote-r.svg","modified":1449581286348,"shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec"},{"_id":"public/images/quote-l.svg","modified":1449581286354,"shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f"},{"_id":"public/images/placeholder.gif","modified":1449581286357,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1449581286359,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1449581286362,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1449581286364,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1449581286368,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1449581286370,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1449581286372,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1449581286375,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1449581286377,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/css/main.css","modified":1449581287022,"shasum":"e6e29655caf9ad2ef8f6a87cb1d316f528207f0c"},{"_id":"public/404.html","modified":1449581287169,"shasum":"92155185adcc84a9f4e7035a514cd622c379ae89"},{"_id":"public/robots.txt","modified":1449581287171,"shasum":"6123a9417ecb039cb56a5b45c3e0450e30196e35"},{"_id":"public/img/说一说我和博客.jpg","modified":1449581287175,"shasum":"0dee97f7d6615ad884b262e82982db52b2a29358"},{"_id":"public/img/我的博客.png","modified":1449581287182,"shasum":"9239c9f1baa1d5073c98d07186fc791b2b466203"},{"_id":"public/img/域名解析.png","modified":1449581287188,"shasum":"e3cd6594465e22ed3b2a872e1b63212862097011"},{"_id":"public/img/hey_folks.jpg","modified":1449581287190,"shasum":"b0a05bc1ed1669615ead2c5c9b7947f2b0d3968c"},{"_id":"public/img/hexo目录.png","modified":1449581287192,"shasum":"826cebfed96a6407234bf963baf6921c398195e1"},{"_id":"public/img/Disqus评论系统.png","modified":1449581287195,"shasum":"e313d38101a7a49f717ff8964c9d125eef3b284d"},{"_id":"public/favicon.ico","modified":1449581287199,"shasum":"bb38565775f52af7d2f1f0187ed9972a7b4f09a1"},{"_id":"public/tags/index.html","modified":1450702595185,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/guestbook/index.html","modified":1450702595187,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/2015/12/07/如何在一天之内搭建以你自己名字为域名的很cool的个人博客/index.html","modified":1450702595190,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/2015/12/06/说一说博客/index.html","modified":1450702595193,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/2015/12/05/Hey folks/index.html","modified":1450702595195,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/archives/index.html","modified":1450702595197,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/archives/2015/index.html","modified":1450702595198,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/archives/2015/12/index.html","modified":1450702595199,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/baidusitemap.xml","modified":1449627881692,"shasum":"3006e4445319dbd47a5ad0d35850c621e8fe02b3"},{"_id":"public/CNAME","modified":1449581287726,"shasum":"b6e903c363301141338985b51e3d46181253afe6"},{"_id":"public/index.html","modified":1450702595235,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/sitemap.xml","modified":1449627881944,"shasum":"9b417124e86d4105c8bd8d899e93a6d672409d64"},{"_id":"public/tags/随笔/index.html","modified":1450702595229,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/tags/一天变cool-系列/index.html","modified":1450702595230,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/tags/个人博客/index.html","modified":1450702595233,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"public/tags/welcome/index.html","modified":1450702595234,"shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709"}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2015-12-05T11:50:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-12-05 19:50:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-12-05T12:43:45.000Z","path":"tags/index.html","layout":"page","_id":"cihxf9qg20001hw3loxtxz0qd"},{"title":"guestbook","date":"2015-12-05T11:21:08.000Z","_content":"","source":"guestbook/index.md","raw":"title: guestbook\ndate: 2015-12-05 19:21:08\n---\n","updated":"2015-12-05T12:43:45.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"cihxf9qg50002hw3lrrqoxk8h"}],"Post":[{"title":"我与代码的相知相遇","_content":"\n对本人而言，由于真正接触代码才是一两年。作为一名菜鸟，对于计算机的认识除了C语言便没有其他。这两年在学校里，除了忙着课程学业和实验室项目，其余时间都在忙着写代码，一晃快要毕业了。这两年写过的代码种类繁多，从最初的只会C语言，慢慢开始学网站前后端开发，学html5、js、mysql、mongoDB，写php，后来又开始学Android，写java。杂七杂八写的还蛮多，也感兴趣。","source":"_drafts/我与代码的相知相遇.md","raw":"title: 我与代码的相知相遇\ntags:\n---\n\n对本人而言，由于真正接触代码才是一两年。作为一名菜鸟，对于计算机的认识除了C语言便没有其他。这两年在学校里，除了忙着课程学业和实验室项目，其余时间都在忙着写代码，一晃快要毕业了。这两年写过的代码种类繁多，从最初的只会C语言，慢慢开始学网站前后端开发，学html5、js、mysql、mongoDB，写php，后来又开始学Android，写java。杂七杂八写的还蛮多，也感兴趣。","slug":"我与代码的相知相遇","published":0,"date":"2015-12-06T14:01:34.000Z","updated":"2015-12-06T14:01:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihxf9qf80000hw3l3c5obr94","sticky":0},{"title":"说一说我和博客","date":"2015-12-06T13:39:28.000Z","_content":"\n![说一说我和博客](/img/说一说我和博客.jpg)\n\n## 我和博客的那些事\n一直以来在各种平台上写过博客。\n\n最早在新浪、博客园。那时的博客是以笔记摘要为主，看一本书，摘抄几句话，即成一文。写多了，慢慢感觉意义不大，也极少回顾。或者说，写那些博客没有个人的思考，故果断弃之。\n\n然后，开始在[简书](http://www.jianshu.com/users/da333fd63fe5/latest_articles)上写，逐渐记录自己的思考和技术为主，如在学习Android中对系统机制的思考和总结。在简书上也偶有佳作得到大家的喜欢，比如[如何在一天之内完成一款具备cool属性的Android产品](http://www.jianshu.com/p/cf496fc408b2)、[如何阅读Android系统源码－收藏必备](http://www.jianshu.com/p/b3580904d298)。这也激励了我更加努力并分享出更多优质的原创内容。另外，最近也开通了Medium博客平台，不过那上面主要写英文文章，此不细讲。\n\n然后，就是大家看到的个人博客网站。前夜，洗澡后头发没干，就乘机坐在被窝里搭了自己的博客。以前觉得个人博客和简书这类公共博客没什么差异，不过现在却发觉个人博客令人思想更自由，可以记录一切，更不怕随着博客平台的更换而丢失。\n\n<!-- more -->\n\n## 介绍下我的博客\n介绍博客之前，要先麻烦朋友记住一个名字：wingjay。为什么要记住它呢，因为域名是：wingjay.com啊！哈哈（冷）。\n\n目前我的博客内容是同时挂载在两个地方GitHub、GitCafe以同时支持两个域名访问。在此我要感谢这二位，让我省去一笔购买服务器的开销，也同时保证了国内国外都能正常访问。\n\n我的博客主要会包括**技术、艺术和思考**。\n\n - 技术，有两种。一是自己工作中接触到的技术如Android和服务器开发。另一种是自己认为很cool的技术，难道不是每个有追求的人都希望自己变得更cool吗？\n - 艺术，讲不清，包含很多。比如美好的移动设计或工业设计，比如一组让人心静的摄影作品，比如一杯凛冽粗暴的伏特加。这些都是我心中的艺术。\n - 思考，同样讲不清。不过我可以肯定的是，我的博客里每个文字都会出自自己的思考。比如对大爷大妈手牵手的思考，比如对某水果台各类脑残剧和琅琊榜对比的思考，比如对Google和Apple之争的思考。太多了。\n\n## 我为什么要写作\n我认为有两点。\n\n1. 博客是程序员的简历之一。对程序员而言，大多数人都是通过你的博客来认识你。而且，多写博客能促使我们去专研问题并与人分享，同时通过他人反馈来改善自我。\n2. 热爱。通过写作，我们可以记录思考，记录生活，记录技术成长。这难道不是一件很正能量的事情吗？\n\n## 我的写作风格\n简单，直接，文艺\n\n\n\n\n逗逼\n","source":"_posts/说一说博客.md","raw":"title: 说一说我和博客\ndate: 2015-12-06 21:39:28\ntags: 随笔\n---\n\n![说一说我和博客](/img/说一说我和博客.jpg)\n\n## 我和博客的那些事\n一直以来在各种平台上写过博客。\n\n最早在新浪、博客园。那时的博客是以笔记摘要为主，看一本书，摘抄几句话，即成一文。写多了，慢慢感觉意义不大，也极少回顾。或者说，写那些博客没有个人的思考，故果断弃之。\n\n然后，开始在[简书](http://www.jianshu.com/users/da333fd63fe5/latest_articles)上写，逐渐记录自己的思考和技术为主，如在学习Android中对系统机制的思考和总结。在简书上也偶有佳作得到大家的喜欢，比如[如何在一天之内完成一款具备cool属性的Android产品](http://www.jianshu.com/p/cf496fc408b2)、[如何阅读Android系统源码－收藏必备](http://www.jianshu.com/p/b3580904d298)。这也激励了我更加努力并分享出更多优质的原创内容。另外，最近也开通了Medium博客平台，不过那上面主要写英文文章，此不细讲。\n\n然后，就是大家看到的个人博客网站。前夜，洗澡后头发没干，就乘机坐在被窝里搭了自己的博客。以前觉得个人博客和简书这类公共博客没什么差异，不过现在却发觉个人博客令人思想更自由，可以记录一切，更不怕随着博客平台的更换而丢失。\n\n<!-- more -->\n\n## 介绍下我的博客\n介绍博客之前，要先麻烦朋友记住一个名字：wingjay。为什么要记住它呢，因为域名是：wingjay.com啊！哈哈（冷）。\n\n目前我的博客内容是同时挂载在两个地方GitHub、GitCafe以同时支持两个域名访问。在此我要感谢这二位，让我省去一笔购买服务器的开销，也同时保证了国内国外都能正常访问。\n\n我的博客主要会包括**技术、艺术和思考**。\n\n - 技术，有两种。一是自己工作中接触到的技术如Android和服务器开发。另一种是自己认为很cool的技术，难道不是每个有追求的人都希望自己变得更cool吗？\n - 艺术，讲不清，包含很多。比如美好的移动设计或工业设计，比如一组让人心静的摄影作品，比如一杯凛冽粗暴的伏特加。这些都是我心中的艺术。\n - 思考，同样讲不清。不过我可以肯定的是，我的博客里每个文字都会出自自己的思考。比如对大爷大妈手牵手的思考，比如对某水果台各类脑残剧和琅琊榜对比的思考，比如对Google和Apple之争的思考。太多了。\n\n## 我为什么要写作\n我认为有两点。\n\n1. 博客是程序员的简历之一。对程序员而言，大多数人都是通过你的博客来认识你。而且，多写博客能促使我们去专研问题并与人分享，同时通过他人反馈来改善自我。\n2. 热爱。通过写作，我们可以记录思考，记录生活，记录技术成长。这难道不是一件很正能量的事情吗？\n\n## 我的写作风格\n简单，直接，文艺\n\n\n\n\n逗逼\n","slug":"说一说博客","published":1,"updated":"2015-12-08T13:26:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihxf9qg70003hw3likqrytof","sticky":0},{"title":"如何在一天之内搭建以你自己名字为域名又具备cool属性的个人博客","date":"2015-12-07T12:03:33.000Z","_content":"\n![个人博客](/img/我的博客.png)\n\n>对程序员而言，最好的简历就是个人博客和GitHub\n\n## 个人博客\n每个优秀的d程序员都会有个人独占的一方网络空间，那里是他个人的舞台，听说过他的人会逐渐汇聚进来，认识他，熟悉他，鼓励他，赞扬他。而对他个人而言，他有了一个可以畅所欲言的小房间，他可以专研学术，聊聊情怀。同时和喜爱他的读者成为好友，共同成长。\n\n这难道不是一件很cool的事情吗？\n\n<!-- more -->\n\n## 先看成果\n教方法前先来看看最终的效果吧。[http://wingjay.com](http://wingjay.com)是本人搭建的个人博客，主要有以下几点：\n\n    1. 个人域名: wingjay.com\n    2. 无需购置服务器，本站同时挂载在Github Pages 和 GitCafe Pages上，免服务器费的同时还能做负载均衡，想想还有点小激动\n    3. 在GitHub上同时管理你的博客和相应代码，再也不用担心博客遗失\n    4. SSL支持，即\"http://\" -> \"https://\"，更安全也更高大上\n\n## 再看兵器\n - 博客框架：[Hexo 3](https://hexo.io)，这是一款能快速、简洁且高效的博客框架，支持[Markdown编辑](https://help.github.com/articles/markdown-basics/)，自动渲染出漂亮的静态页面。\n - 前端主题：[Next](https://github.com/iissnan/hexo-theme-next)，效果参考[http://wingjay.com](http://wingjay.com)\n - 域名购买：[万网](http://wanwang.aliyun.com/)，你可以选购自己名字的域名，一年几十元左右，两杯咖啡的钱。\n - SSL：[CloudFlare](https://www.cloudflare.com)\n\n\n## 抄起家伙\n本文写作方式是`安装流程主线` + `优质参考文章`。由于网络上关于Hexo搭建博客的教程玲琅满目，若读者完全自己动手则要一篇篇找，浪费时间走弯路；相反，若作者悉数摘抄进来，反倒未必符合各人情况，且不利阅读。\n\n所以，`主线`讲解思路，`参考`深入阅读。\n\n下文以搭建 http://wingjay.com 个人博客为例。\n\n### GitHub Pages\n在不购买服务器的前提下，我们的网站需要挂在GitHub Pages上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。\n\n0. 你需要拥有一个[GitHub账号](https://github.com)，去完成新手任务吧。\n1. 进入[GitHub Pages](https://pages.github.com/)，一步步做，完成后就能在浏览器打开[http://wingjay.github.io](http://wingjay.github.io)了。\n\n至此，我们已经利用GitHub Pages搭建好了个人博客雏形了。下面要做的，就是个性化了。\n\n### 安装Hexo博客框架\n经过上面步骤，我们已经拥有了一个初步域名：http://username.github.io 加一个免费网络空间了。好比房间有了，但还没有任何家具。所以下面我们需要把空白的博客丰富起来。\n\n放心，不需要你手写一大堆html、css文件，也不用找jQuery来实现酷炫的页面效果。[Hexo](https://hexo.io)是一款博客框架，它会帮我们搭建。\n\n#### 安装Hexo\n参考[中文文档](https://hexo.io/docs/)或[英文文档](https://hexo.io/zh-cn/docs/index.html)。完成该步后，你的电脑便拥有了Git、Node.js和Hexo。\n\n#### GitHub管理\n为了让自己未来的博客和代码处在git管理之下，我们要把刚刚在Github上博客项目拉到本地。如本人创建的[https://github.com/wingjay/wingjay.github.io](https://github.com/wingjay/wingjay.github.io)，在本地创建文件夹，名字任意，此处设为`myblog`，进入该文件夹，把项目代码clone下来。\n```\ngit clone https://github.com/wingjay/wingjay.github.io\n```\n好了，此时会自动在`myblog`目录下创建子文件夹`wingjay.github.io`,那里就是我们博客的代码，以后的操作都在git的管理之下了，此时默认的branch为`master`。\n\n#### 初始化Hexo\n请参考[文档](https://hexo.io/docs/setup.html)。init命令中的`<folder>`就是文件夹`wingjay.github.io`。初始化后，`wingjay.github.io`里面就已经有完整的Hexo框架了。\n\n#### 熟悉Hexo\n为了让读者快速了解`Hexo`，我作几个简单介绍吧。当然，更多的还是需要仔细阅读[文档](https://hexo.io/docs/writing.html)才能了解更详细。\n\n![hexo目录结构](/img/hexo目录.png)\n\n - `_config.yml`是整体的配置文件，很多基础配置、插件配置等都需要在里面进行。要注意的是，该文件格式要求极为严格，缺少一个空格都会导致运行错误。小提示：不要用Tab缩进，用两个空格符。\n - `layout`，包括`draft(草稿)、page(页面)、post(文章)`。这个就是三种文件的基本格式，其中`post`是你发表的文章，会显示在你的网站里，一篇post会包括`title标题、date日期、tags标签`等信息；`draft`是草稿，只有你在本地能看到，必须要`publish`后才能成为`post`，draft和post差别是date，因为draft没有发表，所以不需要指定日期。`page`是一个页面，对应一个新的html页面，比如[博客内容展示页](http://wingjay.com/2015/12/06/%E8%AF%B4%E4%B8%80%E8%AF%B4%E5%8D%9A%E5%AE%A2/)是一个页面，[留言本](http://wingjay.com/guestbook/)也是一个页面。\n - `public文件夹`，这个文件夹是最终会发布到网站上的真实内容。怎么理解呢？我们可以把`public`文件夹当作是真正的被用户看到的，而其他的`source、themes`等都是为`public`服务的。Hexo里有一个很重要的指令`hexo generate`，这个指令就是利用所有代码里的配置信息、source里写的文章、themes里的样式，共同生成最终的`静态html文件`，存入`public`文件夹内。在我们执行了发布指令`hexo deploy`后，就会把`public`的内容部署到`GitHub Pages`上。当用户在访问我们的博客时，他们会看到public里生成的html文件。这个概念非常重要，即`代码和真实静态页面是独立的`。\n - `generate和deploy`，`generate`会把我们的配置、文章和主题结合起来生成一堆酷炫的html静态文件放在public里面。但此时用户还看不到`本地public文件`里的页面，我们必须用后一个指令`deploy`才能把静态文件部署到`GitHub Pages`上。不过，在部署前，需要配置让它自动部署到我们前面创建的[Github项目](https://github.com/wingjay/wingjay.github.io)中。\n - `deploy`相关配置。为了能够让项目自动把public文件夹的内容部署到[GitHub项目](https://github.com/wingjay/wingjay.github.io)中，我们可以按[部署文档](https://hexo.io/docs/deployment.html)进行配置，其中选择的`branch`为`master`。此后，每次运行deploy后，项目就会自动把public文件夹内容全部覆盖到[当前的GitHub项目master分支上](https://github.com/wingjay/wingjay.github.io/tree/master)。\n - `代码`和`静态文件`分开管理。根据上面知道，每次部署后，public文件内容会`覆盖`掉项目整个master分支。这样可以实现网站`静态文件`的版本控制，但是，仔细对比这个master分支，我们会发现里面**只剩下静态文件**了，我们的代码比如source、themes统统没有了，这就导致无法对代码进行版本管理了。这意味着我换一台电脑，我就再也找不到`代码`了，只剩下一堆之前编译出来的静态文件。所以，为了对代码也进行版本控制，我们创建一个[新的分支：code](https://github.com/wingjay/wingjay.github.io/tree/code)，然后在这个分支里进行代码控制，master里则保存部署的新的静态文件。大家可以自行比对这两个branch的内容差异。\n\n#### 配置Hexo\n做一些基础配置即可，请参考[配置文档](https://hexo.io/docs/configuration.html)\n\n#### 小结\n到这里，我们已经完成了hexo的配置，我们可以在GitHub用不同branch分别管理代码和静态文件。执行deploy操作后，刷新你的网页 http://username.github.io 你就能看到默认的内容了。\n\n但此时还是默认主题，不够美观，所以下一步要配置Next主题。\n\n### 配置主题Next\nHexo主题非常多，可以参考[丰富多彩的Hexo主题](https://hexo.io/themes/)，本文选Next为主题，样式参考[我的博客](http://wingjay.com)。\n\n进入配置阶段，最好的文档还是[官方文档](http://theme-next.iissnan.com/)，简单得不能再细致了。下面只提几点注意：\n\n- 第三方评论系统。评论系统很重要，你可以与读者进行更多交流，配置也简单，建议采用[DISQUS](https://disqus.com/)，更国际化一点，[配置见此](http://theme-next.iissnan.com/third-party-services.html#DISUQS)。另外，前期建议开启`不登陆评论`，即在Disqus的`Comment Rule`里允许`Guest comment`。\n- 创建留言板。熟悉`page`的创建与使用，[参考这里](http://www.arao.me/2015/hexo-next-theme-optimize-base/#为你的hexo网站NexT主题增加留言页)\n- 给自己博客做`SEO`。有好的SEO便于搜索引擎索引你的网站，随着以后读者增多，他们可以更好搜索到你的网站。[具体方法见此](http://www.arao.me/2015/hexo-next-theme-optimize-seo/)\n\n<!-- ![Disqus评论系统](/img/Disqus评论系统.png) -->\n\n### 替换自己的域名\n好了，经过上面的步骤，博客已经拥有了一个全新的主题啦。\n\n下面，我们要对域名 http://wingjay.github.io 下手啦。\n\n#### 购买域名\n速速前往[万网](http://wanwang.aliyun.com/)，支付宝刷的一声，你就拥有了一个闪闪发光的个人域名啦\n\n#### 域名解析_1\n以购买的域名`wingjay.com`为例，我们希望在访问这个域名时能自动进入Github Pages，所以我们要在万网建立一个CNAME纪录来帮我们做一个域名跳转：`wingjay.com` -> `wingjay.github.io`，`www.wingjay.com` -> `wingjay.github.io`。添加方法[参考这里](http://www.sudu.cn/service/detail/1/0/0/3/10036.html)，添加后可以看到两条记录：![域名解析](/img/域名解析.png)。然后万网会在世界各地的DNS服务器上添加这两条记录，当用户访问`wingjay.com`时会自动去访问`wingjay.github.io`。\n\n#### 域名解析_2\n但是，此时并不能成功访问，因为github pages是有限制的，它不允许任意域名都跳转过来，而是只限制一个域名，而且这个域名必须声明在CNAME文件中。\n\n所以，我们需要添加一个CNAME文件到项目的master中才行，[参考这里](https://help.github.com/articles/adding-a-cname-file-to-your-repository/)。读者可以参考本人的[CNAME文件内容](https://github.com/wingjay/wingjay.github.io/blob/master/CNAME)。\n\n不过，对于`Hexo 3`，**这里有一个坑要注意**：大家应该还记得上文说的，master分支里的内容都是自动生成的，而且会完全覆盖之前的内容。如果我们直接创建一个新文件CNAME，填好域名。但会发现在下一次部署后这个文件就消失了。不用惊讶，因为hexo并不会自动生成CNAME文件，所以在部署时被覆盖删除了。\n\n所以，我们就需要这个CNAME工具[hexo-generator-cname](https://github.com/leecrossley/hexo-generator-cname)，这时会自动在public里生成一个CNAME文件，把你的域名加进去再部署一下吧！\n\n### HTTP -> HTTPS\nHTTPS是安全版的HTTP协议，它在http协议与TCP之间加入SSL层，采用端口443，不仅会对传输数据加密，还会进行身份验证。当然个人博客并没有强制性要求采用该协议，这也只是本人的好奇而为。\n\n目前Github Pages已经支持https了，但是不支持自定义证书。不过我们可以利用[CloudFlare](https://www.cloudflare.com)来实现。具体实现可以[参考这里](https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/)\n\n说明：本网站的https正处在申请中\n\n## 总结\n经过上面的步骤，我们已经能够通过访问自己的域名进入自己酷炫的博客了。本文的任务也就告一段落。\n\n除了上面的功能，本人还完成了`支持双域名同时登陆`，其中，支持双域名的解决思路是考虑到[Github Pages的CNAME纪录只允许添加一个域名](https://help.github.com/articles/adding-a-cname-file-to-your-repository/)，所以本人又在[Gitcafe](https://gitcafe.com)上部署了一套。不过考虑到这点大家不一定能用的上，就没有做介绍，有需要的话可以看下文的联系方式联系我。\n\n## 一天变cool系列文章\n[如何在一天之内完成一款具备cool属性的Android产品<简诗>](http://www.jianshu.com/p/cf496fc408b2)\n\n[如何在一天之内搭建以你自己名字为域名且具备cool属性的个人博客](http://www.jianshu.com/p/99665608d295)\n\n## 关于作者\n欢迎各位关注\n[我的Github](https://github.com/wingjay): <https://github.com/wingjay> \n和 \n[我的个人博客](http://wingjay.com): <http://wingjay.com>\n和\n[微博 iam_wingjay](http://weibo.com/u/1625892654): <http://weibo.com/u/1625892654>\n如果有问题，可以给我留言或发邮件<mailto:yinjiesh@126.com>\n\n![](https://avatars0.githubusercontent.com/u/9619875?v=3&s=460)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/如何在一天之内搭建以你自己名字为域名的很cool的个人博客.md","raw":"title: 如何在一天之内搭建以你自己名字为域名又具备cool属性的个人博客\ntags:\n  - '<一天变cool>系列'\n  - 个人博客\ndate: 2015-12-07 20:03:33\n---\n\n![个人博客](/img/我的博客.png)\n\n>对程序员而言，最好的简历就是个人博客和GitHub\n\n## 个人博客\n每个优秀的d程序员都会有个人独占的一方网络空间，那里是他个人的舞台，听说过他的人会逐渐汇聚进来，认识他，熟悉他，鼓励他，赞扬他。而对他个人而言，他有了一个可以畅所欲言的小房间，他可以专研学术，聊聊情怀。同时和喜爱他的读者成为好友，共同成长。\n\n这难道不是一件很cool的事情吗？\n\n<!-- more -->\n\n## 先看成果\n教方法前先来看看最终的效果吧。[http://wingjay.com](http://wingjay.com)是本人搭建的个人博客，主要有以下几点：\n\n    1. 个人域名: wingjay.com\n    2. 无需购置服务器，本站同时挂载在Github Pages 和 GitCafe Pages上，免服务器费的同时还能做负载均衡，想想还有点小激动\n    3. 在GitHub上同时管理你的博客和相应代码，再也不用担心博客遗失\n    4. SSL支持，即\"http://\" -> \"https://\"，更安全也更高大上\n\n## 再看兵器\n - 博客框架：[Hexo 3](https://hexo.io)，这是一款能快速、简洁且高效的博客框架，支持[Markdown编辑](https://help.github.com/articles/markdown-basics/)，自动渲染出漂亮的静态页面。\n - 前端主题：[Next](https://github.com/iissnan/hexo-theme-next)，效果参考[http://wingjay.com](http://wingjay.com)\n - 域名购买：[万网](http://wanwang.aliyun.com/)，你可以选购自己名字的域名，一年几十元左右，两杯咖啡的钱。\n - SSL：[CloudFlare](https://www.cloudflare.com)\n\n\n## 抄起家伙\n本文写作方式是`安装流程主线` + `优质参考文章`。由于网络上关于Hexo搭建博客的教程玲琅满目，若读者完全自己动手则要一篇篇找，浪费时间走弯路；相反，若作者悉数摘抄进来，反倒未必符合各人情况，且不利阅读。\n\n所以，`主线`讲解思路，`参考`深入阅读。\n\n下文以搭建 http://wingjay.com 个人博客为例。\n\n### GitHub Pages\n在不购买服务器的前提下，我们的网站需要挂在GitHub Pages上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。\n\n0. 你需要拥有一个[GitHub账号](https://github.com)，去完成新手任务吧。\n1. 进入[GitHub Pages](https://pages.github.com/)，一步步做，完成后就能在浏览器打开[http://wingjay.github.io](http://wingjay.github.io)了。\n\n至此，我们已经利用GitHub Pages搭建好了个人博客雏形了。下面要做的，就是个性化了。\n\n### 安装Hexo博客框架\n经过上面步骤，我们已经拥有了一个初步域名：http://username.github.io 加一个免费网络空间了。好比房间有了，但还没有任何家具。所以下面我们需要把空白的博客丰富起来。\n\n放心，不需要你手写一大堆html、css文件，也不用找jQuery来实现酷炫的页面效果。[Hexo](https://hexo.io)是一款博客框架，它会帮我们搭建。\n\n#### 安装Hexo\n参考[中文文档](https://hexo.io/docs/)或[英文文档](https://hexo.io/zh-cn/docs/index.html)。完成该步后，你的电脑便拥有了Git、Node.js和Hexo。\n\n#### GitHub管理\n为了让自己未来的博客和代码处在git管理之下，我们要把刚刚在Github上博客项目拉到本地。如本人创建的[https://github.com/wingjay/wingjay.github.io](https://github.com/wingjay/wingjay.github.io)，在本地创建文件夹，名字任意，此处设为`myblog`，进入该文件夹，把项目代码clone下来。\n```\ngit clone https://github.com/wingjay/wingjay.github.io\n```\n好了，此时会自动在`myblog`目录下创建子文件夹`wingjay.github.io`,那里就是我们博客的代码，以后的操作都在git的管理之下了，此时默认的branch为`master`。\n\n#### 初始化Hexo\n请参考[文档](https://hexo.io/docs/setup.html)。init命令中的`<folder>`就是文件夹`wingjay.github.io`。初始化后，`wingjay.github.io`里面就已经有完整的Hexo框架了。\n\n#### 熟悉Hexo\n为了让读者快速了解`Hexo`，我作几个简单介绍吧。当然，更多的还是需要仔细阅读[文档](https://hexo.io/docs/writing.html)才能了解更详细。\n\n![hexo目录结构](/img/hexo目录.png)\n\n - `_config.yml`是整体的配置文件，很多基础配置、插件配置等都需要在里面进行。要注意的是，该文件格式要求极为严格，缺少一个空格都会导致运行错误。小提示：不要用Tab缩进，用两个空格符。\n - `layout`，包括`draft(草稿)、page(页面)、post(文章)`。这个就是三种文件的基本格式，其中`post`是你发表的文章，会显示在你的网站里，一篇post会包括`title标题、date日期、tags标签`等信息；`draft`是草稿，只有你在本地能看到，必须要`publish`后才能成为`post`，draft和post差别是date，因为draft没有发表，所以不需要指定日期。`page`是一个页面，对应一个新的html页面，比如[博客内容展示页](http://wingjay.com/2015/12/06/%E8%AF%B4%E4%B8%80%E8%AF%B4%E5%8D%9A%E5%AE%A2/)是一个页面，[留言本](http://wingjay.com/guestbook/)也是一个页面。\n - `public文件夹`，这个文件夹是最终会发布到网站上的真实内容。怎么理解呢？我们可以把`public`文件夹当作是真正的被用户看到的，而其他的`source、themes`等都是为`public`服务的。Hexo里有一个很重要的指令`hexo generate`，这个指令就是利用所有代码里的配置信息、source里写的文章、themes里的样式，共同生成最终的`静态html文件`，存入`public`文件夹内。在我们执行了发布指令`hexo deploy`后，就会把`public`的内容部署到`GitHub Pages`上。当用户在访问我们的博客时，他们会看到public里生成的html文件。这个概念非常重要，即`代码和真实静态页面是独立的`。\n - `generate和deploy`，`generate`会把我们的配置、文章和主题结合起来生成一堆酷炫的html静态文件放在public里面。但此时用户还看不到`本地public文件`里的页面，我们必须用后一个指令`deploy`才能把静态文件部署到`GitHub Pages`上。不过，在部署前，需要配置让它自动部署到我们前面创建的[Github项目](https://github.com/wingjay/wingjay.github.io)中。\n - `deploy`相关配置。为了能够让项目自动把public文件夹的内容部署到[GitHub项目](https://github.com/wingjay/wingjay.github.io)中，我们可以按[部署文档](https://hexo.io/docs/deployment.html)进行配置，其中选择的`branch`为`master`。此后，每次运行deploy后，项目就会自动把public文件夹内容全部覆盖到[当前的GitHub项目master分支上](https://github.com/wingjay/wingjay.github.io/tree/master)。\n - `代码`和`静态文件`分开管理。根据上面知道，每次部署后，public文件内容会`覆盖`掉项目整个master分支。这样可以实现网站`静态文件`的版本控制，但是，仔细对比这个master分支，我们会发现里面**只剩下静态文件**了，我们的代码比如source、themes统统没有了，这就导致无法对代码进行版本管理了。这意味着我换一台电脑，我就再也找不到`代码`了，只剩下一堆之前编译出来的静态文件。所以，为了对代码也进行版本控制，我们创建一个[新的分支：code](https://github.com/wingjay/wingjay.github.io/tree/code)，然后在这个分支里进行代码控制，master里则保存部署的新的静态文件。大家可以自行比对这两个branch的内容差异。\n\n#### 配置Hexo\n做一些基础配置即可，请参考[配置文档](https://hexo.io/docs/configuration.html)\n\n#### 小结\n到这里，我们已经完成了hexo的配置，我们可以在GitHub用不同branch分别管理代码和静态文件。执行deploy操作后，刷新你的网页 http://username.github.io 你就能看到默认的内容了。\n\n但此时还是默认主题，不够美观，所以下一步要配置Next主题。\n\n### 配置主题Next\nHexo主题非常多，可以参考[丰富多彩的Hexo主题](https://hexo.io/themes/)，本文选Next为主题，样式参考[我的博客](http://wingjay.com)。\n\n进入配置阶段，最好的文档还是[官方文档](http://theme-next.iissnan.com/)，简单得不能再细致了。下面只提几点注意：\n\n- 第三方评论系统。评论系统很重要，你可以与读者进行更多交流，配置也简单，建议采用[DISQUS](https://disqus.com/)，更国际化一点，[配置见此](http://theme-next.iissnan.com/third-party-services.html#DISUQS)。另外，前期建议开启`不登陆评论`，即在Disqus的`Comment Rule`里允许`Guest comment`。\n- 创建留言板。熟悉`page`的创建与使用，[参考这里](http://www.arao.me/2015/hexo-next-theme-optimize-base/#为你的hexo网站NexT主题增加留言页)\n- 给自己博客做`SEO`。有好的SEO便于搜索引擎索引你的网站，随着以后读者增多，他们可以更好搜索到你的网站。[具体方法见此](http://www.arao.me/2015/hexo-next-theme-optimize-seo/)\n\n<!-- ![Disqus评论系统](/img/Disqus评论系统.png) -->\n\n### 替换自己的域名\n好了，经过上面的步骤，博客已经拥有了一个全新的主题啦。\n\n下面，我们要对域名 http://wingjay.github.io 下手啦。\n\n#### 购买域名\n速速前往[万网](http://wanwang.aliyun.com/)，支付宝刷的一声，你就拥有了一个闪闪发光的个人域名啦\n\n#### 域名解析_1\n以购买的域名`wingjay.com`为例，我们希望在访问这个域名时能自动进入Github Pages，所以我们要在万网建立一个CNAME纪录来帮我们做一个域名跳转：`wingjay.com` -> `wingjay.github.io`，`www.wingjay.com` -> `wingjay.github.io`。添加方法[参考这里](http://www.sudu.cn/service/detail/1/0/0/3/10036.html)，添加后可以看到两条记录：![域名解析](/img/域名解析.png)。然后万网会在世界各地的DNS服务器上添加这两条记录，当用户访问`wingjay.com`时会自动去访问`wingjay.github.io`。\n\n#### 域名解析_2\n但是，此时并不能成功访问，因为github pages是有限制的，它不允许任意域名都跳转过来，而是只限制一个域名，而且这个域名必须声明在CNAME文件中。\n\n所以，我们需要添加一个CNAME文件到项目的master中才行，[参考这里](https://help.github.com/articles/adding-a-cname-file-to-your-repository/)。读者可以参考本人的[CNAME文件内容](https://github.com/wingjay/wingjay.github.io/blob/master/CNAME)。\n\n不过，对于`Hexo 3`，**这里有一个坑要注意**：大家应该还记得上文说的，master分支里的内容都是自动生成的，而且会完全覆盖之前的内容。如果我们直接创建一个新文件CNAME，填好域名。但会发现在下一次部署后这个文件就消失了。不用惊讶，因为hexo并不会自动生成CNAME文件，所以在部署时被覆盖删除了。\n\n所以，我们就需要这个CNAME工具[hexo-generator-cname](https://github.com/leecrossley/hexo-generator-cname)，这时会自动在public里生成一个CNAME文件，把你的域名加进去再部署一下吧！\n\n### HTTP -> HTTPS\nHTTPS是安全版的HTTP协议，它在http协议与TCP之间加入SSL层，采用端口443，不仅会对传输数据加密，还会进行身份验证。当然个人博客并没有强制性要求采用该协议，这也只是本人的好奇而为。\n\n目前Github Pages已经支持https了，但是不支持自定义证书。不过我们可以利用[CloudFlare](https://www.cloudflare.com)来实现。具体实现可以[参考这里](https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/)\n\n说明：本网站的https正处在申请中\n\n## 总结\n经过上面的步骤，我们已经能够通过访问自己的域名进入自己酷炫的博客了。本文的任务也就告一段落。\n\n除了上面的功能，本人还完成了`支持双域名同时登陆`，其中，支持双域名的解决思路是考虑到[Github Pages的CNAME纪录只允许添加一个域名](https://help.github.com/articles/adding-a-cname-file-to-your-repository/)，所以本人又在[Gitcafe](https://gitcafe.com)上部署了一套。不过考虑到这点大家不一定能用的上，就没有做介绍，有需要的话可以看下文的联系方式联系我。\n\n## 一天变cool系列文章\n[如何在一天之内完成一款具备cool属性的Android产品<简诗>](http://www.jianshu.com/p/cf496fc408b2)\n\n[如何在一天之内搭建以你自己名字为域名且具备cool属性的个人博客](http://www.jianshu.com/p/99665608d295)\n\n## 关于作者\n欢迎各位关注\n[我的Github](https://github.com/wingjay): <https://github.com/wingjay> \n和 \n[我的个人博客](http://wingjay.com): <http://wingjay.com>\n和\n[微博 iam_wingjay](http://weibo.com/u/1625892654): <http://weibo.com/u/1625892654>\n如果有问题，可以给我留言或发邮件<mailto:yinjiesh@126.com>\n\n![](https://avatars0.githubusercontent.com/u/9619875?v=3&s=460)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"如何在一天之内搭建以你自己名字为域名的很cool的个人博客","published":1,"updated":"2015-12-21T12:56:27.000Z","_id":"cihxf9qgc0006hw3llms0h0qq","comments":1,"layout":"post","photos":[],"link":""},{"title":"Hey folks","date":"2015-12-05T13:39:28.000Z","_content":"\n![Hey folks](/img/hey_folks.jpg)\n\nHi, I'm Jay! Welcome!\n\nThis is my first post here and I will write more here. Interested with me? Keep your eyes here!\n\nThanks!","source":"_posts/Hey folks.md","raw":"title: Hey folks\ntags: welcome\ndate: 2015-12-05 21:39:28\n---\n\n![Hey folks](/img/hey_folks.jpg)\n\nHi, I'm Jay! Welcome!\n\nThis is my first post here and I will write more here. Interested with me? Keep your eyes here!\n\nThanks!","slug":"Hey folks","published":1,"updated":"2015-12-08T13:19:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihxf9qgg000bhw3lc58boe7w","sticky":0}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cihxf9qg70003hw3likqrytof","tag_id":"cihxf9qg90004hw3l6jvmsv5i","_id":"cihxf9qgb0005hw3leoeteadx"},{"post_id":"cihxf9qgc0006hw3llms0h0qq","tag_id":"cihxf9qgd0007hw3livwmdhme","_id":"cihxf9qge0009hw3lanq2dxt2"},{"post_id":"cihxf9qgc0006hw3llms0h0qq","tag_id":"cihxf9qge0008hw3ly0gqbif3","_id":"cihxf9qge000ahw3l8k7tkspb"},{"post_id":"cihxf9qgg000bhw3lc58boe7w","tag_id":"cihxf9qgh000chw3ldrr80v84","_id":"cihxf9qgh000dhw3ldawfa80o"}],"Tag":[{"name":"随笔","_id":"cihxf9qg90004hw3l6jvmsv5i"},{"name":"<一天变cool>系列","_id":"cihxf9qgd0007hw3livwmdhme"},{"name":"个人博客","_id":"cihxf9qge0008hw3ly0gqbif3"},{"name":"welcome","_id":"cihxf9qgh000chw3ldrr80v84"}]}}